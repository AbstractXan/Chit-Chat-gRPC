// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/chat.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Types
type Login struct {
	Username             string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
	Mode                 int32    `protobuf:"varint,3,opt,name=mode" json:"mode,omitempty"`
	Macaddress           string   `protobuf:"bytes,4,opt,name=macaddress" json:"macaddress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Login) Reset()         { *m = Login{} }
func (m *Login) String() string { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()    {}
func (*Login) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_cb3812aeed0098dd, []int{0}
}
func (m *Login) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Login.Unmarshal(m, b)
}
func (m *Login) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Login.Marshal(b, m, deterministic)
}
func (dst *Login) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Login.Merge(dst, src)
}
func (m *Login) XXX_Size() int {
	return xxx_messageInfo_Login.Size(m)
}
func (m *Login) XXX_DiscardUnknown() {
	xxx_messageInfo_Login.DiscardUnknown(m)
}

var xxx_messageInfo_Login proto.InternalMessageInfo

func (m *Login) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *Login) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *Login) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *Login) GetMacaddress() string {
	if m != nil {
		return m.Macaddress
	}
	return ""
}

type Message struct {
	Sender               string   `protobuf:"bytes,1,opt,name=sender" json:"sender,omitempty"`
	Text                 string   `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Register             bool     `protobuf:"varint,3,opt,name=register" json:"register,omitempty"`
	Group                int32    `protobuf:"varint,4,opt,name=group" json:"group,omitempty"`
	Groupname            string   `protobuf:"bytes,5,opt,name=groupname" json:"groupname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_cb3812aeed0098dd, []int{1}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Message) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func (m *Message) GetRegister() bool {
	if m != nil {
		return m.Register
	}
	return false
}

func (m *Message) GetGroup() int32 {
	if m != nil {
		return m.Group
	}
	return 0
}

func (m *Message) GetGroupname() string {
	if m != nil {
		return m.Groupname
	}
	return ""
}

type Logout struct {
	Username             string   `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Logout) Reset()         { *m = Logout{} }
func (m *Logout) String() string { return proto.CompactTextString(m) }
func (*Logout) ProtoMessage()    {}
func (*Logout) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_cb3812aeed0098dd, []int{2}
}
func (m *Logout) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Logout.Unmarshal(m, b)
}
func (m *Logout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Logout.Marshal(b, m, deterministic)
}
func (dst *Logout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logout.Merge(dst, src)
}
func (m *Logout) XXX_Size() int {
	return xxx_messageInfo_Logout.Size(m)
}
func (m *Logout) XXX_DiscardUnknown() {
	xxx_messageInfo_Logout.DiscardUnknown(m)
}

var xxx_messageInfo_Logout proto.InternalMessageInfo

func (m *Logout) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func init() {
	proto.RegisterType((*Login)(nil), "proto.Login")
	proto.RegisterType((*Message)(nil), "proto.Message")
	proto.RegisterType((*Logout)(nil), "proto.Logout")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	LoginCred(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Login, error)
	TransferMessage(ctx context.Context, opts ...grpc.CallOption) (Chat_TransferMessageClient, error)
	LogoutCred(ctx context.Context, in *Logout, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) LoginCred(ctx context.Context, in *Login, opts ...grpc.CallOption) (*Login, error) {
	out := new(Login)
	err := c.cc.Invoke(ctx, "/proto.Chat/LoginCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) TransferMessage(ctx context.Context, opts ...grpc.CallOption) (Chat_TransferMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/proto.Chat/TransferMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatTransferMessageClient{stream}
	return x, nil
}

type Chat_TransferMessageClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatTransferMessageClient struct {
	grpc.ClientStream
}

func (x *chatTransferMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatTransferMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatClient) LogoutCred(ctx context.Context, in *Logout, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Chat/LogoutCred", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	LoginCred(context.Context, *Login) (*Login, error)
	TransferMessage(Chat_TransferMessageServer) error
	LogoutCred(context.Context, *Logout) (*empty.Empty, error)
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_LoginCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).LoginCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Chat/LoginCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).LoginCred(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_TransferMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServer).TransferMessage(&chatTransferMessageServer{stream})
}

type Chat_TransferMessageServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatTransferMessageServer struct {
	grpc.ServerStream
}

func (x *chatTransferMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatTransferMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Chat_LogoutCred_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Logout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).LogoutCred(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Chat/LogoutCred",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).LogoutCred(ctx, req.(*Logout))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginCred",
			Handler:    _Chat_LoginCred_Handler,
		},
		{
			MethodName: "LogoutCred",
			Handler:    _Chat_LogoutCred_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TransferMessage",
			Handler:       _Chat_TransferMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/chat.proto",
}

func init() { proto.RegisterFile("proto/chat.proto", fileDescriptor_chat_cb3812aeed0098dd) }

var fileDescriptor_chat_cb3812aeed0098dd = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4e, 0xf3, 0x30,
	0x10, 0xc5, 0xeb, 0xef, 0x6b, 0x4a, 0x3b, 0xe2, 0x9f, 0x46, 0xa8, 0x8a, 0x02, 0x42, 0x55, 0xc4,
	0xa2, 0x6c, 0x52, 0x04, 0x42, 0x1c, 0xa0, 0x62, 0x57, 0x36, 0x11, 0x17, 0x70, 0xeb, 0xa9, 0x5b,
	0x89, 0xc4, 0x91, 0xed, 0x08, 0x38, 0x00, 0x07, 0xe1, 0xa6, 0x28, 0xe3, 0xa4, 0x05, 0x16, 0xac,
	0xf2, 0x7e, 0xcf, 0xce, 0x3c, 0xcf, 0x0c, 0x9c, 0x56, 0xd6, 0x78, 0x33, 0x5b, 0x6d, 0xa4, 0xcf,
	0x58, 0x62, 0xc4, 0x9f, 0xe4, 0x5c, 0x1b, 0xa3, 0x5f, 0x68, 0xc6, 0xb4, 0xac, 0xd7, 0x33, 0x2a,
	0x2a, 0xff, 0x1e, 0xee, 0xa4, 0x0e, 0xa2, 0x85, 0xd1, 0xdb, 0x12, 0x13, 0x18, 0xd6, 0x8e, 0x6c,
	0x29, 0x0b, 0x8a, 0xc5, 0x44, 0x4c, 0x47, 0xf9, 0x8e, 0x9b, 0xb3, 0x4a, 0x3a, 0xf7, 0x6a, 0xac,
	0x8a, 0xff, 0x85, 0xb3, 0x8e, 0x11, 0xa1, 0x5f, 0x18, 0x45, 0xf1, 0xff, 0x89, 0x98, 0x46, 0x39,
	0x6b, 0xbc, 0x04, 0x28, 0xe4, 0x4a, 0x2a, 0x65, 0xc9, 0xb9, 0xb8, 0xcf, 0x7f, 0x7c, 0x73, 0xd2,
	0x0f, 0x01, 0x07, 0x4f, 0xe4, 0x9c, 0xd4, 0x84, 0x63, 0x18, 0x38, 0x2a, 0x15, 0xd9, 0x36, 0xb5,
	0xa5, 0xa6, 0xae, 0xa7, 0x37, 0xdf, 0xe6, 0xb1, 0x6e, 0xde, 0x61, 0x49, 0x6f, 0x9d, 0x27, 0xcb,
	0x79, 0xc3, 0x7c, 0xc7, 0x78, 0x06, 0x91, 0xb6, 0xa6, 0xae, 0x38, 0x2e, 0xca, 0x03, 0xe0, 0x05,
	0x8c, 0x58, 0x70, 0x5b, 0x11, 0x97, 0xda, 0x1b, 0xe9, 0x15, 0x0c, 0x16, 0x46, 0x9b, 0xda, 0xff,
	0xd5, 0xfd, 0xed, 0xa7, 0x80, 0xfe, 0x7c, 0x23, 0x3d, 0x5e, 0xc3, 0x88, 0x67, 0x35, 0xb7, 0xa4,
	0xf0, 0x30, 0x0c, 0x30, 0x63, 0x27, 0xf9, 0x41, 0x69, 0x0f, 0x1f, 0xe0, 0xe4, 0xd9, 0xca, 0xd2,
	0xad, 0xc9, 0x76, 0x8d, 0x1e, 0xb7, 0x57, 0x5a, 0x4e, 0x7e, 0x71, 0xda, 0x9b, 0x8a, 0x1b, 0x81,
	0xf7, 0x00, 0xe1, 0x49, 0x1c, 0x72, 0xb4, 0x2f, 0x6b, 0x6a, 0x9f, 0x8c, 0xb3, 0xb0, 0xca, 0xac,
	0x5b, 0x65, 0xf6, 0xd8, 0xac, 0x32, 0xed, 0x2d, 0x07, 0xec, 0xdc, 0x7d, 0x05, 0x00, 0x00, 0xff,
	0xff, 0xf1, 0x1b, 0x69, 0x5f, 0x05, 0x02, 0x00, 0x00,
}
